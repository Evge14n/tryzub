// Приклад 3: Об'єктно-орієнтоване програмування
// Система для управління банківськими рахунками

імпорт рядки
імпорт математика

// Базовий клас для банківського рахунку
структура БанківськийРахунок {
    приватний номер_рахунку: тхт
    приватний власник: тхт
    приватний баланс: дрб64
    приватний валюта: тхт
}

// Методи для банківського рахунку
реалізація БанківськийРахунок {
    функція новий(номер: тхт, власник: тхт, початковий_баланс: дрб64, валюта: тхт) -> БанківськийРахунок {
        повернути БанківськийРахунок {
            номер_рахунку: номер,
            власник: власник,
            баланс: початковий_баланс,
            валюта: валюта
        }
    }
    
    функція поповнити(&це, сума: дрб64) {
        якщо (сума <= 0) {
            помилка("Сума поповнення має бути додатною")
        }
        це.баланс += сума
        друк("Рахунок " + це.номер_рахунку + " поповнено на " + 
             дробове_в_рядок(сума) + " " + це.валюта)
    }
    
    функція зняти(&це, сума: дрб64) -> лог {
        якщо (сума <= 0) {
            помилка("Сума зняття має бути додатною")
        }
        
        якщо (сума > це.баланс) {
            друк("Недостатньо коштів на рахунку")
            повернути хиба
        }
        
        це.баланс -= сума
        друк("З рахунку " + це.номер_рахунку + " знято " + 
             дробове_в_рядок(сума) + " " + це.валюта)
        повернути істина
    }
    
    функція переказати(&це, інший_рахунок: &БанківськийРахунок, сума: дрб64) -> лог {
        якщо (це.валюта != інший_рахунок.валюта) {
            друк("Перекази можливі тільки між рахунками з однаковою валютою")
            повернути хиба
        }
        
        якщо (це.зняти(сума)) {
            інший_рахунок.поповнити(сума)
            друк("Переказ успішний!")
            повернути істина
        }
        
        повернути хиба
    }
    
    функція отримати_баланс(&це) -> дрб64 {
        повернути це.баланс
    }
    
    функція показати_інформацію(&це) {
        друк("\n=== Інформація про рахунок ===")
        друк("Номер рахунку: " + це.номер_рахунку)
        друк("Власник: " + це.власник)
        друк("Баланс: " + дробове_в_рядок(це.баланс) + " " + це.валюта)
    }
}

// Ощадний рахунок з відсотками
структура ОщаднийРахунок {
    базовий: БанківськийРахунок
    відсоткова_ставка: дрб64
    мінімальний_баланс: дрб64
}

реалізація ОщаднийРахунок {
    функція новий(номер: тхт, власник: тхт, початковий_баланс: дрб64, 
                  валюта: тхт, ставка: дрб64) -> ОщаднийРахунок {
        повернути ОщаднийРахунок {
            базовий: БанківськийРахунок.новий(номер, власник, початковий_баланс, валюта),
            відсоткова_ставка: ставка,
            мінімальний_баланс: 1000.0
        }
    }
    
    функція нарахувати_відсотки(&це) {
        якщо (це.базовий.баланс >= це.мінімальний_баланс) {
            змінна відсотки = це.базовий.баланс * це.відсоткова_ставка / 100.0
            це.базовий.поповнити(відсотки)
            друк("Нараховано відсотки: " + дробове_в_рядок(відсотки) + " " + це.базовий.валюта)
        } інакше {
            друк("Баланс нижче мінімального для нарахування відсотків")
        }
    }
}

// Система управління банком
структура Банк {
    назва: тхт
    рахунки: словник<тхт, БанківськийРахунок>
    наступний_номер: цл64
}

реалізація Банк {
    функція новий(назва: тхт) -> Банк {
        повернути Банк {
            назва: назва,
            рахунки: новий_словник(),
            наступний_номер: 1000000
        }
    }
    
    функція відкрити_рахунок(&це, власник: тхт, початковий_баланс: дрб64, 
                           валюта: тхт, тип: тхт) -> тхт {
        змінна номер = "UA" + ціле_в_рядок(це.наступний_номер)
        це.наступний_номер += 1
        
        змінна рахунок: БанківськийРахунок
        якщо (тип == "звичайний") {
            рахунок = БанківськийРахунок.новий(номер, власник, початковий_баланс, валюта)
        } інакше якщо (тип == "ощадний") {
            рахунок = ОщаднийРахунок.новий(номер, власник, початковий_баланс, валюта, 5.0).базовий
        } інакше {
            помилка("Невідомий тип рахунку: " + тип)
        }
        
        встановити(це.рахунки, номер, рахунок)
        друк("Відкрито новий " + тип + " рахунок: " + номер)
        повернути номер
    }
    
    функція знайти_рахунок(&це, номер: тхт) -> &БанківськийРахунок {
        якщо (!містить_ключ(це.рахунки, номер)) {
            помилка("Рахунок не знайдено: " + номер)
        }
        повернути отримати_посилання(це.рахунки, номер)
    }
    
    функція показати_всі_рахунки(&це) {
        друк("\n=== Всі рахунки в банку " + це.назва + " ===")
        для (номер, рахунок в це.рахунки) {
            рахунок.показати_інформацію()
        }
    }
}

// Демонстрація роботи
функція головна() {
    друк("Система управління банківськими рахунками")
    друк("=========================================\n")
    
    // Створюємо банк
    змінна банк = Банк.новий("Тризуб Банк")
    
    // Відкриваємо рахунки
    змінна рахунок1 = банк.відкрити_рахунок("Петро Іваненко", 5000.0, "UAH", "звичайний")
    змінна рахунок2 = банк.відкрити_рахунок("Марія Коваленко", 10000.0, "UAH", "ощадний")
    змінна рахунок3 = банк.відкрити_рахунок("Олег Шевченко", 2500.0, "UAH", "звичайний")
    
    // Отримуємо посилання на рахунки
    змінна р1 = банк.знайти_рахунок(рахунок1)
    змінна р2 = банк.знайти_рахунок(рахунок2)
    змінна р3 = банк.знайти_рахунок(рахунок3)
    
    // Виконуємо операції
    друк("\n--- Операції з рахунками ---")
    р1.поповнити(1500.0)
    р2.зняти(2000.0)
    р1.переказати(р3, 1000.0)
    
    // Нараховуємо відсотки на ощадний рахунок
    якщо (р2 є ОщаднийРахунок) {
        змінна ощадний = р2 як ОщаднийРахунок
        ощадний.нарахувати_відсотки()
    }
    
    // Показуємо стан всіх рахунків
    банк.показати_всі_рахунки()
    
    // Демонстрація обробки помилок
    друк("\n--- Спроба неправильних операцій ---")
    спробувати {
        р3.зняти(10000.0) // Недостатньо коштів
    } зловити (е) {
        друк("Помилка: " + повідомлення_помилки(е))
    }
    
    спробувати {
        банк.знайти_рахунок("UA999999") // Неіснуючий рахунок
    } зловити (е) {
        друк("Помилка: " + повідомлення_помилки(е))
    }
}
