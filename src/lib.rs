// –ú–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –¢—Ä–∏–∑—É–±
// –ê–≤—Ç–æ—Ä: –ú–∞—Ä—Ç–∏–Ω—é–∫ –Ñ–≤–≥–µ–Ω
// –°—Ç–≤–æ—Ä–µ–Ω–æ: 06.04.2025
// Copyright (c) 2025 –ú–∞—Ä—Ç–∏–Ω—é–∫ –Ñ–≤–≥–µ–Ω. –í—Å—ñ –ø—Ä–∞–≤–∞ –∑–∞—Ö–∏—â–µ–Ω—ñ.

//! # –¢—Ä–∏–∑—É–± - –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è
//! 
//! –ù–∞–π—à–≤–∏–¥—à–∞ —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∞ –º–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è —É —Å–≤—ñ—Ç—ñ.
//! 
//! ## –ü—Ä–∏–∫–ª–∞–¥
//! 
//! ```tryzub
//! —Ñ—É–Ω–∫—Ü—ñ—è –≥–æ–ª–æ–≤–Ω–∞() {
//!     –¥—Ä—É–∫("–ü—Ä–∏–≤—ñ—Ç, —Å–≤—ñ—Ç!")
//! }
//! ```

pub use lexer::*;
pub use parser::*;
pub use compiler::*;
pub use vm::*;
pub use runtime::*;

pub mod lexer {
    pub use tryzub_lexer::*;
}

pub mod parser {
    pub use tryzub_parser::*;
}

pub mod compiler {
    pub use tryzub_compiler::*;
}

pub mod vm {
    pub use tryzub_vm::*;
}

pub mod runtime {
    pub use tryzub_runtime::*;
}

/// –í–µ—Ä—Å—ñ—è –º–æ–≤–∏ –¢—Ä–∏–∑—É–±
pub const VERSION: &str = "1.0.0";

/// –ê–≤—Ç–æ—Ä –º–æ–≤–∏
pub const AUTHOR: &str = "–ú–∞—Ä—Ç–∏–Ω—é–∫ –Ñ–≤–≥–µ–Ω";

/// –î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
pub const CREATED: &str = "06.04.2025";

/// –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–æ–≤—É
pub fn about() -> String {
    format!(
        "–¢—Ä–∏–∑—É–± v{}\n–ê–≤—Ç–æ—Ä: {}\n–°—Ç–≤–æ—Ä–µ–Ω–æ: {}\n\nüá∫üá¶ –ù–∞–π—à–≤–∏–¥—à–∞ —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∞ –º–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è",
        VERSION, AUTHOR, CREATED
    )
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_version() {
        assert_eq!(VERSION, "1.0.0");
    }

    #[test]
    fn test_author() {
        assert_eq!(AUTHOR, "–ú–∞—Ä—Ç–∏–Ω—é–∫ –Ñ–≤–≥–µ–Ω");
    }
}
