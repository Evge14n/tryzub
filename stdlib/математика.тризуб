// Стандартна бібліотека мови Тризуб
// Модуль: математика

модуль математика {
    // Математичні константи
    публічний стала ПІ: дрб64 = 3.14159265358979323846
    публічний стала Е: дрб64 = 2.71828182845904523536
    публічний стала ТАУ: дрб64 = 6.28318530717958647692
    публічний стала ЗОЛОТИЙ_ПЕРЕТИН: дрб64 = 1.61803398874989484820
    
    // Основні математичні функції
    публічний функція абс(x: дрб64) -> дрб64 {
        якщо (x < 0.0) {
            повернути -x
        } інакше {
            повернути x
        }
    }
    
    публічний функція мін(а: дрб64, б: дрб64) -> дрб64 {
        якщо (а < б) {
            повернути а
        } інакше {
            повернути б
        }
    }
    
    публічний функція макс(а: дрб64, б: дрб64) -> дрб64 {
        якщо (а > б) {
            повернути а
        } інакше {
            повернути б
        }
    }
    
    публічний функція підлога(x: дрб64) -> цл64 {
        повернути x як цл64
    }
    
    публічний функція стеля(x: дрб64) -> цл64 {
        змінна підлога_x = підлога(x)
        якщо (x > підлога_x як дрб64) {
            повернути підлога_x + 1
        } інакше {
            повернути підлога_x
        }
    }
    
    публічний функція округлити(x: дрб64) -> цл64 {
        повернути підлога(x + 0.5)
    }
    
    // Тригонометричні функції (використовують зовнішні C функції)
    зовнішня функція sin(x: дрб64) -> дрб64
    зовнішня функція cos(x: дрб64) -> дрб64
    зовнішня функція tan(x: дрб64) -> дрб64
    зовнішня функція asin(x: дрб64) -> дрб64
    зовнішня функція acos(x: дрб64) -> дрб64
    зовнішня функція atan(x: дрб64) -> дрб64
    зовнішня функція atan2(y: дрб64, x: дрб64) -> дрб64
    
    публічний функція синус(x: дрб64) -> дрб64 {
        повернути sin(x)
    }
    
    публічний функція косинус(x: дрб64) -> дрб64 {
        повернути cos(x)
    }
    
    публічний функція тангенс(x: дрб64) -> дрб64 {
        повернути tan(x)
    }
    
    // Експоненціальні та логарифмічні функції
    зовнішня функція exp(x: дрб64) -> дрб64
    зовнішня функція log(x: дрб64) -> дрб64
    зовнішня функція log10(x: дрб64) -> дрб64
    зовнішня функція pow(x: дрб64, y: дрб64) -> дрб64
    зовнішня функція sqrt(x: дрб64) -> дрб64
    
    публічний функція степінь(основа: дрб64, показник: дрб64) -> дрб64 {
        повернути pow(основа, показник)
    }
    
    публічний функція корінь(x: дрб64) -> дрб64 {
        повернути sqrt(x)
    }
    
    публічний функція логарифм(x: дрб64) -> дрб64 {
        повернути log(x)
    }
    
    публічний функція логарифм10(x: дрб64) -> дрб64 {
        повернути log10(x)
    }
    
    // Функції для роботи з цілими числами
    публічний функція нсд(а: цл64, б: цл64) -> цл64 {
        змінна x = абс(а як дрб64) як цл64
        змінна y = абс(б як дрб64) як цл64
        
        поки (y != 0) {
            змінна залишок = x % y
            x = y
            y = залишок
        }
        
        повернути x
    }
    
    публічний функція нск(а: цл64, б: цл64) -> цл64 {
        повернути (а * б) / нсд(а, б)
    }
    
    публічний функція факторіал(n: цл64) -> цл64 {
        якщо (n < 0) {
            помилка("Факторіал визначений тільки для невід'ємних чисел")
        }
        
        змінна результат: цл64 = 1
        для (i від 2 до n + 1) {
            результат *= i
        }
        повернути результат
    }
    
    // Перевірка на простоту числа
    публічний функція є_простим(n: цл64) -> лог {
        якщо (n <= 1) {
            повернути хиба
        }
        якщо (n <= 3) {
            повернути істина
        }
        якщо (n % 2 == 0 || n % 3 == 0) {
            повернути хиба
        }
        
        змінна i: цл64 = 5
        поки (i * i <= n) {
            якщо (n % i == 0 || n % (i + 2) == 0) {
                повернути хиба
            }
            i += 6
        }
        
        повернути істина
    }
    
    // Генерація випадкових чисел
    приватний змінна _випадкове_зерно: цл64 = 1
    
    публічний функція встановити_зерно(зерно: цл64) {
        _випадкове_зерно = зерно
    }
    
    публічний функція випадкове() -> дрб64 {
        // Лінійний конгруентний генератор
        _випадкове_зерно = (_випадкове_зерно * 1103515245 + 12345) % 2147483648
        повернути _випадкове_зерно як дрб64 / 2147483648.0
    }
    
    публічний функція випадкове_ціле(мін: цл64, макс: цл64) -> цл64 {
        повернути мін + (випадкове() * (макс - мін + 1) як дрб64) як цл64
    }
    
    // Статистичні функції
    публічний функція середнє(числа: [дрб64]) -> дрб64 {
        якщо (довжина(числа) == 0) {
            повернути 0.0
        }
        
        змінна сума = 0.0
        для (число в числа) {
            сума += число
        }
        
        повернути сума / довжина(числа) як дрб64
    }
    
    публічний функція медіана(числа: [дрб64]) -> дрб64 {
        якщо (довжина(числа) == 0) {
            повернути 0.0
        }
        
        змінна відсортовані = сортувати(числа)
        змінна n = довжина(відсортовані)
        
        якщо (n % 2 == 0) {
            повернути (відсортовані[n / 2 - 1] + відсортовані[n / 2]) / 2.0
        } інакше {
            повернути відсортовані[n / 2]
        }
    }
    
    публічний функція дисперсія(числа: [дрб64]) -> дрб64 {
        якщо (довжина(числа) <= 1) {
            повернути 0.0
        }
        
        змінна сер = середнє(числа)
        змінна сума_квадратів = 0.0
        
        для (число в числа) {
            змінна різниця = число - сер
            сума_квадратів += різниця * різниця
        }
        
        повернути сума_квадратів / (довжина(числа) - 1) як дрб64
    }
    
    публічний функція стандартне_відхилення(числа: [дрб64]) -> дрб64 {
        повернути корінь(дисперсія(числа))
    }
}
